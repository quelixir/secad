// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Entity - represents Australian corporations and business entities
model Entity {
  id                String     @id @default(cuid())
  name              String
  abn               String?    @unique // Australian Business Number
  acn               String?    @unique // Australian Company Number
  entityType        String     // "PROPRIETARY", "PUBLIC", etc.
  incorporationDate DateTime?
  address           String?
  city              String?
  state             String?
  postcode          String?
  country           String     @default("Australia")
  status            String     @default("Active") // "Active", "Inactive", "Dissolved"
  
  // Contact details
  email             String?
  phone             String?
  website           String?
  
  // Metadata
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relations
  members           Member[]
  securityClasses   SecurityClass[]
  transactions      Transaction[]
  associates        Associate[]
  resolutions       Resolution[]
  
  @@map("entities")
}

// Member/Shareholder entity
model Member {
  id              String      @id @default(cuid())
  entityId        String
  
  // Personal details
  firstName       String?
  lastName        String?
  entityName      String?     // For corporate members
  memberType      String      // "Individual", "Company", "Trust", "SMSF"
  
  // Contact details
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  postcode        String?
  country         String      @default("Australia")
  
  // Member details
  memberNumber    String?     // Entity-specific member number
  designation     String?     // Account designation for non-beneficial holdings
  joinDate        DateTime    @default(now())
  status          String      @default("Active") // "Active", "Inactive", "Resigned"
  
  // Tax details
  tfn             String?     // Tax File Number
  abn             String?     // For business members
  
  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  entity          Entity      @relation(fields: [entityId], references: [id], onDelete: Cascade)
  transactionsFrom Transaction[] @relation("TransactionFromMember")
  transactionsTo   Transaction[] @relation("TransactionToMember")
  
  @@unique([entityId, memberNumber])
  @@map("members")
}

// Security Class entity - different types of shares/securities
model SecurityClass {
  id              String      @id @default(cuid())
  entityId        String
  name            String      // "Ordinary Shares", "Preference Shares", "Options", etc.
  symbol          String?     // "ORD", "PREF", "OPT"
  description     String?
  
  // Rights and characteristics
  votingRights    Boolean     @default(true)
  dividendRights  Boolean     @default(true)
  
  // Status
  isActive        Boolean     @default(true)
  
  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  entity          Entity      @relation(fields: [entityId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  
  @@unique([entityId, name])
  @@map("security_classes")
}

// Transaction entity - unified system for all securities transactions
model Transaction {
  id              String        @id @default(cuid())
  entityId        String
  securityClassId String
  
  // Transaction type and details
  transactionType String        // "ISSUE", "TRANSFER", "CANCELLATION", "REDEMPTION", "RETURN_OF_CAPITAL", "CAPITAL_CALL"
  quantity        Int           // Number of securities in this transaction
  reasonCode      String        // Transaction reason code (e.g., "BON", "RED", "CAL")
  
  // Financial details
  amountPaidPerSecurity Decimal? @db.Decimal(10, 4)  // Amount paid per security
  amountUnpaidPerSecurity Decimal? @db.Decimal(10, 4) // Amount unpaid per security
  transferPricePerSecurity Decimal? @db.Decimal(10, 4) // For TRANSFER transactions only
  currency String? @default("AUD") // Currency code (AUD, USD, EUR, etc.)
  
  // Calculated totals
  totalAmountPaid Decimal?      @db.Decimal(12, 2)   // quantity * amountPaidPerSecurity
  totalAmountUnpaid Decimal?    @db.Decimal(12, 2)   // quantity * amountUnpaidPerSecurity
  totalTransferAmount Decimal?  @db.Decimal(12, 2)   // quantity * transferPricePerSecurity
  
  // Parties involved
  fromMemberId    String?       // null for ISSUE transactions (entity issuing), member ID for others
  toMemberId      String?       // Member ID for ISSUE/TRANSFER, null for CANCELLATION
  
  // Tranche grouping
  trancheNumber   String?       // e.g., "T001", "T002" - groups related transactions
  trancheSequence Int?          // Sequence within tranche (1, 2, 3, etc.)
  
  // Transaction metadata
  transactionDate DateTime      @default(now())
  settlementDate  DateTime?
  reference       String?       // Internal reference number
  description     String?
  
  // Legal documents
  certificateNumber String?
  documentPath    String?       // Path to supporting documents
  
  // Status
  status          String        @default("Completed") // "Pending", "Completed", "Cancelled"
  
  // Metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  entity          Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  securityClass   SecurityClass @relation(fields: [securityClassId], references: [id], onDelete: Cascade)
  fromMember      Member?       @relation("TransactionFromMember", fields: [fromMemberId], references: [id])
  toMember        Member?       @relation("TransactionToMember", fields: [toMemberId], references: [id])
  
  @@map("transactions")
}

// Associate entity - handles directors, secretaries, trustees, appointors, etc.
model Associate {
  id              String        @id @default(cuid())
  entityId        String
  
  // Associate type (officeholder_director, officeholder_secretary, trustee, appointor, etc.)
  type            String        // "officeholder_director", "officeholder_secretary", "trustee", "appointor"
  
  // Individual vs Corporate
  isIndividual    Boolean       @default(true)
  
  // Individual details (when isIndividual = true)
  givenNames      String?       // All given names
  familyName      String?       // Family/last name
  dateOfBirth     DateTime?     // Date of birth for individuals
  previousNames   String[]      // Array of previous names for individuals
  
  // Corporate details (when isIndividual = false)
  entityName      String?       // Full legal entity name
  
  // Contact details
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  postcode        String?
  country         String        @default("Australia")
  
  // Associate status and dates
  status          String        @default("Active") // "Active", "Resigned", "Removed"
  appointmentDate DateTime      @default(now())
  resignationDate DateTime?     // Date of resignation or removal
  
  // Additional details
  notes           String?       // Additional notes or details
  
  // Metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  entity          Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("associates")
}

// Resolution entity - handles directors' and members' resolutions
model Resolution {
  id              String        @id @default(cuid())
  entityId        String
  
  // Resolution details
  title           String        // Brief title of the resolution
  type            String        // "directors_appointment", "directors_removal", "dividend_declaration", "general_business", "members_constitutional", etc.
  category        String        // "directors" or "members"
  description     String?       // Detailed description
  content         String        @db.Text // Full resolution text/content
  
  // Resolution status and dates
  status          String        @default("Draft") // "Draft", "Approved", "Rejected", "Superseded"
  resolutionDate  DateTime?     // Date the resolution was passed
  effectiveDate   DateTime?     // Date the resolution takes effect
  
  // Approval details
  approvedBy      String?       // Who approved it (e.g., "Board of Directors", "Shareholders")
  votingDetails   String?       // Voting results if applicable
  
  // Document details
  referenceNumber String?       // Internal reference number
  attachments     String[]      // Array of attachment file paths/URLs
  
  // Related records
  relatedPersonId String?       // For appointments/removals - link to associate
  
  // Additional details
  notes           String?       // Additional notes or comments
  
  // Metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       String?       // User who created the resolution
  
  // Relations
  entity          Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@map("resolutions")
}
