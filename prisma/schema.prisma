generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth schema

model User {
  id              String    @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  sessions        Session[]
  accounts        Account[]
  userEntityAccess UserEntityAccess[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// (end Better Auth schema)

// secad schema

model Entity {
  id                   String             @id @default(cuid(2))
  name                 String
  entityTypeId         String
  incorporationDate    DateTime?
  incorporationCountry String?
  incorporationState   String?
  address              String?
  city                 String?
  state                String?
  postcode             String?
  country              String             @default("Australia")
  status               String             @default("Active")
  email                String?
  phone                String?
  website              String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  associates           Associate[]
  identifiers          EntityIdentifier[]
  members              Member[]
  resolutions          Resolution[]
  securityClasses      SecurityClass[]
  transactions         Transaction[]
  userEntityAccess     UserEntityAccess[]
  invitations          Invitation[]

  @@map("entities")
}

model EntityIdentifier {
  id        String   @id @default(cuid(2))
  entityId  String
  type      String
  value     String
  country   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([entityId, type, country])
  @@map("entity_identifiers")
}

model Member {
  id               String        @id @default(cuid(2))
  entityId         String
  firstName        String?
  lastName         String?
  entityName       String?
  memberType       String
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  postcode         String?
  country          String        @default("Australia")
  memberNumber     String?
  designation      String?
  joinDate         DateTime      @default(now())
  status           String        @default("Active")
  tfn              String?
  abn              String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  entity           Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  transactionsFrom Transaction[] @relation("TransactionFromMember")
  transactionsTo   Transaction[] @relation("TransactionToMember")

  @@unique([entityId, memberNumber])
  @@map("members")
}

model SecurityClass {
  id             String        @id @default(cuid(2))
  entityId       String
  name           String
  symbol         String?
  description    String?
  votingRights   Boolean       @default(true)
  dividendRights Boolean       @default(true)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  entity         Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@unique([entityId, name])
  @@map("security_classes")
}

model Transaction {
  id                       String        @id @default(cuid(2))
  entityId                 String
  securityClassId          String
  transactionType          String
  quantity                 Int
  reasonCode               String
  amountPaidPerSecurity    Decimal?      @db.Decimal(10, 4)
  amountUnpaidPerSecurity  Decimal?      @db.Decimal(10, 4)
  transferPricePerSecurity Decimal?      @db.Decimal(10, 4)
  currency                 String?       @default("AUD")
  totalAmountPaid          Decimal?      @db.Decimal(12, 2)
  totalAmountUnpaid        Decimal?      @db.Decimal(12, 2)
  totalTransferAmount      Decimal?      @db.Decimal(12, 2)
  fromMemberId             String?
  toMemberId               String?
  trancheNumber            String?
  trancheSequence          Int?
  transactionDate          DateTime      @default(now())
  settlementDate           DateTime?
  reference                String?
  description              String?
  certificateNumber        String?
  documentPath             String?
  status                   String        @default("Completed")
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  entity                   Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  fromMember               Member?       @relation("TransactionFromMember", fields: [fromMemberId], references: [id])
  securityClass            SecurityClass @relation(fields: [securityClassId], references: [id], onDelete: Cascade)
  toMember                 Member?       @relation("TransactionToMember", fields: [toMemberId], references: [id])

  @@map("transactions")
}

model Associate {
  id              String    @id @default(cuid(2))
  entityId        String
  type            String
  isIndividual    Boolean   @default(true)
  givenNames      String?
  familyName      String?
  dateOfBirth     DateTime?
  previousNames   String[]
  entityName      String?
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  postcode        String?
  country         String    @default("Australia")
  status          String    @default("Active")
  appointmentDate DateTime  @default(now())
  resignationDate DateTime?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  entity          Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("associates")
}

model Resolution {
  id              String    @id @default(cuid(2))
  entityId        String
  title           String
  type            String
  category        String
  description     String?
  content         String
  status          String    @default("Draft")
  resolutionDate  DateTime?
  effectiveDate   DateTime?
  approvedBy      String?
  votingDetails   String?
  referenceNumber String?
  attachments     String[]
  relatedPersonId String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String?
  entity          Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("resolutions")
}

model UserEntityAccess {
  id        String   @id @default(cuid(2))
  userId    String
  entityId  String
  role      String   // 'Admin', 'Editor', 'Viewer'
  invitedBy String?  // userId of inviter, nullable
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@map("user_entity_access")
}

model Invitation {
  id         String   @id @default(cuid(2))
  entityId   String
  email      String
  role       String   // 'Admin', 'Editor', 'Viewer'
  invitedBy  String   // userId of inviter
  token      String   @unique
  accepted   Boolean  @default(false)
  createdAt  DateTime @default(now())
  acceptedAt DateTime?
  expiresAt  DateTime

  entity     Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
}
